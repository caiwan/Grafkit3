#include "stdafx.h"
#include "assimp.h"

#include <assimp/Importer.hpp>
#include <assimp/material.h>
#include <assimp/matrix3x3.h>
#include <assimp/matrix4x4.h>
#include <assimp/mesh.h>
#include <assimp/postprocess.h>
#include <assimp/scene.h>

#include <grafkit/core/log.h>

using namespace Grafkit;
using Grafkit::Core::Log;

namespace {
	std::string GetMaterialName(aiScene* aiscene, int index)
	{
		if (index < aiscene->mNumMaterials) {
			aiString name;
			aiMaterial* srcMaterial = aiscene->mMaterials[index];

			if (srcMaterial->Get(AI_MATKEY_NAME, name) == AI_SUCCESS) {
				return std::string(name.C_Str());
			} else {
				std::stringstream ss;
				ss << "material_" << index;
				return ss.str();
			}
		}

		return std::string();
	}
} // namespace

Grafkit::ScenegraphPtr AssimpLoader::Load(const std::string& filename)
{
	Assimp::Importer importer;
	const aiScene* aiscene = importer.ReadFile(filename, aiProcess_Triangulate | aiProcess_FlipUVs);

	// Load materials
	if (aiscene->HasMaterials()) {
		Log::Instance().Info("Loading materials");
		for (uint32_t materialIndex = 0; materialIndex < aiscene->mNumMaterials; materialIndex++) {
			aiMaterial* srcMaterial = aiscene->mMaterials[i];

			// material->SetName(GetMaterialName(i));

			Log::Instance().Info("Loading material #%d", i);
			// LOGGER(Log::Logger().Trace("- #%d %s", i, material->GetName().c_str()));

			aiReturn texFound = AI_FAILURE;

			// --- SNIP ---
			// -- -- load textures
			// textura -> material
			for (size_t k = 0; k < sizeof(texture_load_map) / sizeof(texture_load_map[0]); k++) {
				for (size_t j = 0; j < srcMaterial->GetTextureCount(texture_load_map[k].ai); j++) {
					LOGGER(Log::Logger().Trace("-- texture #%s #%d", texture_load_map[k].tt, j));
					// TODO: does it work at all ?
					// material->AddTexture(assimpTexture(texture_load_map[k].ai, curr_mat, j, resman),
					// texture_load_map[k].tt);
				}
			}
			// --- SMAP ---

			// there is not much to set up atm
			material->Colors().diffuse = aiMatkey4ToFloat4(srcMaterial, AI_MATKEY_COLOR_DIFFUSE);
			material->Colors().specular = aiMatkey4ToFloat4(srcMaterial, AI_MATKEY_COLOR_SPECULAR);

			env->GetBuilder().AddMaterial(material);
		}
	}

	return Grafkit::ScenegraphPtr();
}
